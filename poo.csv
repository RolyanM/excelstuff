name	ring	quadrant	isNew	description
Applying product management to internal platforms	Fart	Poo	FALSE	<p>Hi</p>
CI/CD infrastructure as a service	Fart1	Poo	TRUE	<p>TBye</p>
Dependency pruning	Fart2	Poo	TRUE	<p>Starter .</p>
Run cost as architecture fitness function	Fart3	Poo1	FALSE	<p>Automatically esti</p>
Accessibility annotations in designs	Fart3	Poo2	TRUE	<p>The earlier accessibility is considered in software delivery, the easier and cheaper it is to ensure what's built works for as many people as possible. Tools that help communicate <strong>accessibility annotations in designs</strong> help teams consider important elements like document structure, semantic HTML and alternative texts from the beginning of their work. This enables them to ensure user interfaces meet global accessibility standards and address common failures that are actually fairly easy to avoid. <a href="/radar/tools/figma">Figma</a> offers a range of accessibility notation plugins: <a href="https://www.figma.com/community/file/953682768192596304">The A11y Annotation Kit</a>, Twitter's <a href="https://www.figma.com/community/file/976946194228458698">Accessibility Annotation Library</a> and the Axe toolset's <a href="https://www.figma.com/community/plugin/1085612091163821851/Axe-for-Designers-(FREE)">Axe for Designers</a>.</p>
Bounded low-code platforms	Fart1	Poo2	FALSE	"<p>We've always been advocates of writing less code. Simplicity is one of the core values underlying our sensible defaults for software development. For example, we try not to anticipate needs and only introduce code that satisfies immediate business requirements and nothing else. One way to achieve this is to create engineering platforms that make this possible on an organizational basis.</p>

<p>This is also the stated aim of many low-code platforms surging in popularity right now. Platforms like <a href=""https://www.mendix.com/"">Mendix</a> or <a href=""https://powerapps.microsoft.com/"">Microsoft Power Apps</a> can expose common business processes for reuse and simplify the problems of getting new functionality deployed and in the hands of users. These platforms have made great strides in recent years with testability and support for good engineering practices. They're particularly useful for simple tasks or event-triggered apps. However, asking them to adapt to a nearly infinite range of business requirements brings complexity. Although developers might be writing less (or zero) code, they must also become experts in an all-encompassing commercial platform. We would advise businesses to consider if they need all the functionality these products bring or if they're better off pursuing <strong>bounded low-code platforms</strong>, either by developing their own <a href=""/radar/techniques/applying-product-management-to-internal-platforms"">platform as an internal product</a> or by carefully constraining the use of commercial low-code products to those simple tasks at which they excel.</p>"
Demo frontends for API-only products	Fart1	Poo1	TRUE	<p>One of the big challenges in developing APIs is capturing and communicating their business value. APIs are, by their nature, technical artifacts. Whereas developers can easily comprehend JSON payloads, OpenAPI (<a href="/radar/tools/swagger">Swagger</a>) specs and <a href="/radar/tools/postman">Postman</a> demos, business stakeholders tend to respond better to demos they can interact with. The value of the product is more clearly articulated when you can see and touch it, which is why we sometimes find it worthwhile to invest in <strong>demo frontends for API-only products</strong>. When a custom graphical UI is built alongside an API product, stakeholders can see analogies to paper forms or reports that might be more familiar to them. As the interaction model and richness of the demo UI evolves, it allows them to make more informed decisions about the direction the API product should take. Working on the UI has the added benefit of increasing developers' empathy for business users. This isn't a new technique â€” we've been doing this successfully when necessary as long as API products have been around. However, because this technique isn't widely known, we thought it worthwhile calling attention to it.</p>
Lakehouse architecture	Fart2	Poo2	TRUE	<p><strong><a href="https://www.cidrdb.org/cidr2021/papers/cidr2021_paper17.pdf">Lakehouse architecture</a></strong> is an architectural style that combines the scalability of data lakes with the reliability and performance of data warehouses. It enables organizations to store and analyze large volumes of diverse data in a single platform as opposed to having them in separate lake and warehouse tiers, using the same familiar SQL-based tools and techniques. While the term is often associated with vendors like Databricks, open alternatives such as <a href="/radar/platforms/delta-lake">Delta Lake</a>, <a href="/radar/platforms/apache-iceberg">Apache Iceberg</a> and <a href="/radar/platforms/apache-hudi">Apache Hudi</a> are worth considering. Lakehouse architecture can complement <a href="/radar/techniques/data-mesh">data mesh</a> implementations. Autonomous data product teams can choose to leverage a Lakehouse within their data products.</p>
Verifiable credentials	Fart	Poo3	FALSE	<p>Hi</p>
